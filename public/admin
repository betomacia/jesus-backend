<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Admin Push</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: system-ui, sans-serif; padding:16px; max-width:980px; margin:0 auto; }
    h1 { margin: 0 0 12px; }
    .row { display:flex; gap:12px; flex-wrap:wrap; align-items:center; }
    .card { border:1px solid #e5e7eb; border-radius:12px; padding:12px; background:#fff; }
    table { width:100%; border-collapse: collapse; }
    th, td { border-bottom:1px solid #eee; padding:8px; text-align:left; font-size:13px; }
    th { background:#fafafa; position: sticky; top: 0; }
    .btn { padding:8px 12px; border-radius:10px; border:none; cursor:pointer; }
    .btn:disabled { opacity:.6; cursor:not-allowed; }
    .btn-primary { background:#2563eb; color:#fff; }
    .btn-green { background:#16a34a; color:#fff; }
    .btn-gray { background:#111827; color:#fff; }
    .pill { display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; background:#f3f4f6; }
    .muted { color:#6b7280; font-size:12px }
    textarea, input[type="text"] { width:100%; padding:8px; border:1px solid #ddd; border-radius:8px; }
    .hint { font-size:12px; color:#6b7280; }
    .ok { color:#16a34a; }
    .err { color:#dc2626; }
    .scroll { max-height: 340px; overflow: auto; }
  </style>
</head>
<body>

  <h1>Admin Push</h1>

  <div class="card" style="margin-bottom:12px">
    <div class="row">
      <label>Email:&nbsp;<input id="email" type="text" value="info@movilive.com" style="min-width:260px"></label>
      <label>Admin Key:&nbsp;<input id="admkey" type="text" value="abc123" style="min-width:180px"></label>
      <button id="btnLoad" class="btn btn-gray">Cargar dispositivos</button>
    </div>
    <div id="loadMsg" class="muted" style="margin-top:6px"></div>
  </div>

  <div class="card" style="margin-bottom:12px">
    <div class="row" style="align-items:flex-start; gap:16px">
      <div style="flex:1; min-width:260px">
        <label>T√≠tulo<br><input id="title" type="text" placeholder="T√≠tulo" value="Hola üëã"></label>
      </div>
      <div style="flex:2; min-width:280px">
        <label>Mensaje<br><textarea id="body" rows="3" placeholder="Texto a mostrar">Prueba push desde admin</textarea></label>
      </div>
      <div style="flex:1; min-width:220px">
        <label>Destino<br>
          <select id="aud" style="width:100%; padding:8px; border:1px solid #ddd; border-radius:8px;">
            <option value="all">Todos</option>
            <option value="web">Solo Desktop/Web</option>
            <option value="android">Solo Android</option>
            <option value="selected">Seleccionados (checkbox)</option>
          </select>
        </label>
      </div>
    </div>

    <div class="row" style="margin-top:10px">
      <button id="btnSend" class="btn btn-primary">Enviar</button>
      <div class="hint">Android recibir√° **notificaci√≥n visible**. Desktop/Web recibir√° **data-only** para evitar duplicados.</div>
    </div>
    <div id="sendMsg" style="margin-top:6px"></div>
  </div>

  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div><b>Dispositivos</b> <span class="muted">(se actualiza con ‚ÄúCargar dispositivos‚Äù)</span></div>
      <div class="muted">Tip: Android tambi√©n aparece como plataforma ‚Äúweb‚Äù (PWA/Chrome)</div>
    </div>
    <div class="scroll">
      <table id="devTable">
        <thead>
          <tr>
            <th><input type="checkbox" id="chkAll"></th>
            <th>ID</th>
            <th>device_id</th>
            <th>platform</th>
            <th>last_seen</th>
            <th>token (inicio)</th>
          </tr>
        </thead>
        <tbody id="devBody">
          <!-- filas din√°micas -->
        </tbody>
      </table>
    </div>
  </div>

<script>
  const BACKEND = "https://jesus-backend-production-1098.up.railway.app";

  const el = (id) => document.getElementById(id);
  const emailEl = el("email");
  const keyEl = el("admkey");
  const loadMsg = el("loadMsg");
  const sendMsg = el("sendMsg");
  const devBody = el("devBody");
  const chkAll = el("chkAll");
  const audEl = el("aud");
  const titleEl = el("title");
  const bodyEl = el("body");

  let devices = [];

  function rowHTML(d, idx){
    const token20 = (d.fcm_token||"").slice(0,20) + "‚Ä¶";
    const platPill = `<span class="pill">${d.platform||"?"}</span>`;
    return `
      <tr>
        <td><input type="checkbox" data-idx="${idx}"></td>
        <td>${d.id}</td>
        <td>${d.device_id||""}</td>
        <td>${platPill}</td>
        <td class="muted">${d.last_seen||""}</td>
        <td class="muted" title="${d.fcm_token||""}">${token20}</td>
      </tr>
    `;
  }

  function renderTable(){
    devBody.innerHTML = devices.map((d,i)=>rowHTML(d,i)).join("");
  }

  async function loadDevices(){
    sendMsg.textContent = "";
    devBody.innerHTML = "";
    devices = [];
    chkAll.checked = false;
    loadMsg.textContent = "Cargando‚Ä¶";
    try{
      const r = await fetch(`${BACKEND}/users/push/devices?email=` + encodeURIComponent(emailEl.value.trim()));
      const j = await r.json();
      if(!j || j.ok === false){ throw new Error(j?.error || "Error al cargar"); }
      devices = Array.isArray(j.devices) ? j.devices : [];
      // Normalizamos posibles typos en device_id VISUALMENTE (no cambia backend)
      devices = devices.map(d => {
        let device_id = d.device_id || "";
        if(/^ANDRID_CRHOME_/i.test(device_id)){
          device_id = device_id.replace(/^ANDRID_CRHOME_/i, "ANDROID_CHROME_");
        }
        return { ...d, device_id };
      });
      renderTable();
      loadMsg.innerHTML = `<span class="ok">OK</span> ${devices.length} dispositivos`;
    }catch(e){
      loadMsg.innerHTML = `<span class="err">Fallo</span> ${(e && e.message) || e}`;
    }
  }

  function selectedDevices(){
    if(audEl.value !== "selected") return devices;
    const checks = devBody.querySelectorAll('input[type="checkbox"][data-idx]');
    const out = [];
    checks.forEach(c => { if(c.checked){ out.push(devices[Number(c.dataset.idx)]); } });
    return out;
  }

  function audienceFilter(list){
    const mode = audEl.value;
    if(mode === "all" || mode === "selected") return list;
    if(mode === "web"){
      // Desktop/web: mantenemos todo lo que *no huela* a Android userAgent en device_id (heur√≠stica)
      return list.filter(d => !/ANDROID_CHROME_/i.test(d.device_id||""));
    }
    if(mode === "android"){
      // Android registrados como "web" pero device_id con ANDROID_CHROME_
      return list.filter(d => /ANDROID_CHROME_/i.test(d.device_id||""));
    }
    return list;
  }

  async function adminSendByToken(token, platform, title, body, webDataOnly){
    // env√≠a directo por token; platform ‚Äúweb‚Äù en ambos casos (as√≠ est√° en tu backend)
    const payload = {
      fcm_token: token,
      platform: "web",
      title,
      body,
      data: { act: "open_app" },
      webDataOnly
    };
    const r = await fetch(`${BACKEND}/users/push/admin-send`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8",
        "X-Admin-Key": keyEl.value.trim()
      },
      body: JSON.stringify(payload)
    });
    return r.json();
  }

  async function handleSend(){
    sendMsg.textContent = "Enviando‚Ä¶";
    const title = titleEl.value.trim() || "Notificaci√≥n";
    const body  = bodyEl.value.trim() || "";

    const baseList = selectedDevices();
    const list = audienceFilter(baseList);

    if(list.length === 0){
      sendMsg.innerHTML = `<span class="err">No hay dispositivos para ese destino.</span>`;
      return;
    }

    let targeted = 0, sent = 0, failed = 0;
    for(const d of list){
      if(!d.fcm_token) continue;
      targeted++;
      // Heur√≠stica: si el device_id contiene ANDROID_CHROME_ => queremos notificaci√≥n visible (webDataOnly=false)
      const isAndroid = /ANDROID_CHROME_/i.test(d.device_id||"");
      const webDataOnly = !isAndroid; // desktop/web => data-only; android => visible
      try{
        const resp = await adminSendByToken(d.fcm_token, d.platform, title, body, webDataOnly);
        if(resp && resp.ok !== false){
          // resp.sent puede venir a nivel agregado; contamos por intento
          if(resp.sent > 0 || (resp.results && resp.results[0]?.ok)) sent++;
          else failed++;
        }else{
          failed++;
        }
      }catch{
        failed++;
      }
    }

    sendMsg.innerHTML = `<b>Resultado:</b> targeted=${targeted} ¬∑ sent=${sent} ¬∑ failed=${failed}`;
  }

  // Eventos
  el("btnLoad").addEventListener("click", loadDevices);
  el("btnSend").addEventListener("click", handleSend);
  chkAll.addEventListener("change", () => {
    const checks = devBody.querySelectorAll('input[type="checkbox"][data-idx]');
    checks.forEach(c => c.checked = chkAll.checked);
  });

  // Carga inicial
  loadDevices();
</script>

</body>
</html>
