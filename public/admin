<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Admin Push (m√≠nimo)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: system-ui, sans-serif; padding:16px; max-width:820px; margin:0 auto; }
    h1 { margin: 0 0 16px; }
    .card { border:1px solid #e5e7eb; border-radius:12px; padding:14px; background:#fff; margin-bottom:12px; }
    .row { display:flex; gap:12px; flex-wrap:wrap; align-items:center; }
    .btn { padding:10px 14px; border-radius:10px; border:none; background:#2563eb; color:#fff; cursor:pointer; }
    .btn:disabled { opacity:.6; cursor:not-allowed; }
    input[type="text"], textarea, select { width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:10px; }
    label { font-size:13px; color:#374151; display:block; }
    .muted { color:#6b7280; font-size:12px; }
    .result { font-size:14px; margin-top:8px; }
    .ok { color:#16a34a; }
    .err { color:#dc2626; }
  </style>
</head>
<body>
  <h1>Admin Push (m√≠nimo)</h1>

  <div class="card">
    <div class="row">
      <div style="flex:1; min-width:220px">
        <label>Email de cuenta<br>
          <input id="email" type="text" value="info@movilive.com" placeholder="email due√±o de los dispositivos">
        </label>
      </div>
      <div style="flex:1; min-width:180px">
        <label>Admin Key<br>
          <input id="admkey" type="text" value="abc123">
        </label>
      </div>
      <div style="flex:1; min-width:160px">
        <label>Idioma destino<br>
          <select id="lang">
            <option value="all">Todos</option>
            <option value="es">Espa√±ol (es)</option>
            <option value="en">Ingl√©s (en)</option>
            <option value="pt">Portugu√©s (pt)</option>
          </select>
        </label>
      </div>
    </div>
    <div class="row">
      <div style="flex:1; min-width:240px">
        <label>T√≠tulo<br>
          <input id="title" type="text" placeholder="T√≠tulo" value="Hola üëã">
        </label>
      </div>
      <div style="flex:2; min-width:280px">
        <label>Mensaje<br>
          <textarea id="body" rows="3" placeholder="Texto a mostrar">Mensaje para tus usuarios</textarea>
        </label>
      </div>
    </div>
    <div class="row">
      <button id="btnSend" class="btn">Enviar</button>
      <span class="muted">Android recibir√° <b>notificaci√≥n visible</b>. Desktop/Web recibir√° <b>data-only</b> (el SW muestra).</span>
    </div>
    <div id="sendMsg" class="result"></div>
  </div>

  <div class="card">
    <div class="row">
      <button id="btnPreview" class="btn" style="background:#111827">Previsualizar destinatarios</button>
      <span id="previewMsg" class="muted"></span>
    </div>
  </div>

<script>
(() => {
  const BACKEND = "https://jesus-backend-production-1098.up.railway.app";

  const $ = (id) => document.getElementById(id);
  const emailEl = $("email");
  const keyEl = $("admkey");
  const langEl = $("lang");
  const titleEl = $("title");
  const bodyEl = $("body");
  const btnSend = $("btnSend");
  const sendMsg = $("sendMsg");
  const btnPreview = $("btnPreview");
  const previewMsg = $("previewMsg");

  function isAndroidDeviceId(device_id){
    return /ANDROID_CHROME_/i.test(device_id||"");
  }

  function filterByLang(devices, lang){
    if (lang === "all") return devices;
    return devices.filter(d => (d.lang || "").toLowerCase().startsWith(lang.toLowerCase()));
  }

  async function fetchDevices(email){
    const url = `${BACKEND}/users/push/devices?email=${encodeURIComponent(email)}&t=${Date.now()}`;
    const r = await fetch(url, { cache:"no-store" });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const j = await r.json();
    if (!j || j.ok === false) throw new Error(j?.error || "error_backend");
    return Array.isArray(j.devices) ? j.devices : [];
  }

  async function adminSendByToken(token, visibleOnAndroid){
    // visibleOnAndroid=true => notification visible (webDataOnly=false)
    // Desktop/Web => data-only con __title/__body (webDataOnly=true)
    const title = titleEl.value.trim() || "Notificaci√≥n";
    const body  = bodyEl.value.trim() || "";

    const payload = visibleOnAndroid
      ? {
          fcm_token: token,
          platform: "web",
          title,
          body,
          data: { act: "open_app", url: "/" },
          webDataOnly: false
        }
      : {
          fcm_token: token,
          platform: "web",
          title, // opcional, lo importante va en data
          body,
          data: { __title: title, __body: body, url: "/" },
          webDataOnly: true
        };

    const r = await fetch(`${BACKEND}/users/push/admin-send`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8",
        "X-Admin-Key": keyEl.value.trim()
      },
      body: JSON.stringify(payload)
    });
    return r.json();
  }

  async function preview(){
    previewMsg.textContent = "Cargando‚Ä¶";
    try {
      const email = emailEl.value.trim();
      if (!email) throw new Error("Ingres√° el email de cuenta.");
      const devs = await fetchDevices(email);
      const filtered = filterByLang(devs, langEl.value);
      const cntAndroid = filtered.filter(d => isAndroidDeviceId(d.device_id)).length;
      const cntDesktop = filtered.length - cntAndroid;
      previewMsg.textContent = `Encontrados: ${filtered.length} ¬∑ Desktop/Web: ${cntDesktop} ¬∑ Android: ${cntAndroid}`;
    } catch (e) {
      previewMsg.textContent = "Fallo: " + (e?.message || e);
    }
  }

  async function sendAll(){
    sendMsg.textContent = "Enviando‚Ä¶";
    btnSend.disabled = true;
    try {
      const email = emailEl.value.trim();
      if (!email) throw new Error("Ingres√° el email de cuenta.");
      const devices = await fetchDevices(email);
      const list = filterByLang(devices, langEl.value);

      if (list.length === 0) {
        sendMsg.innerHTML = `<span class="err">No hay dispositivos para ese idioma.</span>`;
        return;
      }

      let targeted = 0, sent = 0, failed = 0;
      for (const d of list) {
        if (!d.fcm_token) continue;
        targeted++;
        const isAndroid = isAndroidDeviceId(d.device_id);
        try {
          const resp = await adminSendByToken(d.fcm_token, isAndroid);
          if (resp && resp.ok !== false) {
            if (resp.sent > 0 || (resp.results && resp.results[0]?.ok)) sent++;
            else failed++;
          } else {
            failed++;
          }
        } catch {
          failed++;
        }
      }

      const cls = failed ? "err" : "ok";
      sendMsg.innerHTML = `<span class="${cls}"><b>Resultado:</b> targeted=${targeted} ¬∑ sent=${sent} ¬∑ failed=${failed}</span>`;
    } catch (e) {
      sendMsg.innerHTML = `<span class="err">Fallo al enviar: ${(e?.message || e)}</span>`;
    } finally {
      btnSend.disabled = false;
    }
  }

  btnPreview.addEventListener("click", preview);
  btnSend.addEventListener("click", sendAll);
})();
</script>
</body>
</html>
